deterministic=function(i1=0.2,i2=0.2,i3=0.2,i4=0.2,i5=0.2,c1=0.04,c2=0.8,c3=0.19,c4=0.9,c5=0.2,c6=0.88,c7=0.4,c8=0.9,t=30,tby=0.1){
 
# kit to solve Sys of ODE's
pol<-function(t,y,mu){
	list(c(
	mu[1]*y[1]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[2]*y[1],
	mu[2]*y[1]+mu[3]*y[2]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[4]*y[2],
	mu[4]*y[2]-mu[5]*y[3],
	mu[6]*y[4]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[7]*y[4],
	mu[7]*y[4]-mu[8]*y[5]
	))
}

yini<-c(w1=i1,w2=i2,w3=i3,w4=i4,w5=i5)

dt<-ode(y=yini,func=pol,times=seq(0,t,by=tby),parms=c(c1,c2,c3,c4,c5,c6,c7,c8)) 
deterministic=dt[,6]/(dt[,6]+2*dt[,4])
return (deterministic)
}

pseudodata=function(i1=0.2,i2=0.2,i3=0.2,i4=0.2,i5=0.2,c1=0.04,c2=0.8,c3=0.19,c4=0.9,c5=0.2,c6=0.88,c7=0.4,c8=0.9,t=30,tby=0.1){
##  Simulate pesudo-data first: 
# kit to solve Sys of ODE's
pol<-function(t,y,mu){
	list(c(
	mu[1]*y[1]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[2]*y[1],
	mu[2]*y[1]+mu[3]*y[2]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[4]*y[2],
	mu[4]*y[2]-mu[5]*y[3],
	mu[6]*y[4]*(1-(y[1]+y[2]+y[3]+y[4]+y[5]))-mu[7]*y[4],
	mu[7]*y[4]-mu[8]*y[5]
	))
}

yini<-c(w1=i1,w2=i2,w3=i3,w4=i4,w5=i5)

# simulated "data": psdata
dt<-ode(y=yini,func=pol,times=seq(0,t,by=tby),parms=c(c1,c2,c3,c4,c5,c6,c7,c8)) 
psdata=dt[,6]/(dt[,6]+2*dt[,4])+rnorm(1,sd=0.1) ## assuming data variance to be 0.1, assuming normal error
return (psdata)
}

myLikelihood=function(a1,t,tby,psdata,erv1){ ## this is calculating the likelihood given the data: psdata for the parameter c8 to be a1
	l=0
	gt1=deterministic(c8=a1,t=t,tby=tby)
	for (tmpts in 1:(t/tby)) {
   lp=dnorm(psdata[tmpts],gt1[tmpts],erv1,log=TRUE) 
   l=l+lp
  }
  return(l)

}

## function to perform MCMC based on previous functions: 
myMCMC=function(psdata,erv1=0.1,erv2=0.1,t=30,tby=0.1,n=1000){ #psdata is the real data to deal with; erv1 is the noise variance, erv2 is the variance of proposal distribution; n is the number of times of MCMC.
# currently this only infers c8. (since the definition of mylikelihood function)

##  now start implementing MCMC:
 # "real"data is generated by previous function
a=rep(NA,n)
a1=runif(1) 
a[1]=a1
 
# log-likelihood l for datat using guess:
lold=myLikelihood(a1,t,tby,psdata,erv1)
 
# Using for-loop
for (MCtime in 1:(n-1)){
# now propose a new candidate for a:
a2=rnorm(1,a[MCtime],erv2) 
if (a2<0 || a2>1){
 a[MCtime+1]=a[MCtime]
# print(paste("acurrent", a[MCtime],", aproposed rejected=", a2,"outside of the prior"))
} else {

	# to compute log-likelihood based on guess a2:
	lnew=myLikelihood(a2,t,tby,psdata,erv1)

 
## to compute M-H
  alpha=min(1,exp(lnew-lold))
   u=runif(1)
#   print(paste("MCtime=", MCtime,", lold=",lold, ", lnew=",lnew, "likratio=",exp(lnew-lold) ))
   if (u<=alpha){
	a[MCtime+1]=a2
	lold=lnew
#	print(paste("acurrent", a[MCtime],", aproposed accepted=", a2,", alpha=", alpha,", u=",u ))
      } # end if
       else{
		a[MCtime+1]=a[MCtime]
#print(paste("acurrent", a[MCtime],", aproposed rejected=", a2,", alpha=", alpha,", u=",u ))
	 }# end else
	 } #end else
	
lnew=NA	 
} #end for (MCtime 1:n-1)
return(a)}
